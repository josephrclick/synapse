
> synapse@0.1.0 dev
> PORT=${FRONTEND_PORT:-8100} next dev --turbopack

   ▲ Next.js 15.3.5 (Turbopack)
   - Local:        http://localhost:8100
   - Network:      http://192.168.0.30:8100
   - Environments: .env.local, .env

 ✓ Starting...
 ✓ Ready in 774ms
 ○ Compiling / ...
 ✓ Compiled / in 1677ms
 GET / 200 in 2025ms
 ✓ Compiled /api/chat in 357ms
Backend URL: http://localhost:8101
API Key configured: Yes
 ○ Compiling /_not-found/page ...
 ✓ Compiled /_not-found/page in 702ms
 GET /.well-known/appspecific/com.chrome.devtools.json 404 in 759ms
Backend response status: 200
Backend response headers: {
  'content-length': '283',
  'content-type': 'application/json',
  date: 'Thu, 10 Jul 2025 23:54:06 GMT',
  server: 'uvicorn',
  'x-request-id': '76878e27-1877-4fe2-bde1-f89dadd11c78'
}
 POST /api/chat 200 in 23972ms
 ○ Compiling /ingest ...
 ✓ Compiled /ingest in 694ms
 GET /ingest 200 in 737ms
Backend URL: http://localhost:8101
 POST /ingest 200 in 54ms
 GET / 200 in 51ms
 POST /api/chat 200 in 54172ms
 GET / 200 in 74ms
 GET /.well-known/appspecific/com.chrome.devtools.json 404 in 111ms
 ✓ Compiled /favicon.ico in 447ms
 GET /favicon.ico?favicon.45db1c09.ico 200 in 701ms
API Proxy Error: TypeError: fetch failed
    at async POST (app/api/chat/route.ts:26:28)
  24 |     // Forward the request and return the response directly.
  25 |     // This is a simple, effective proxy that doesn't need streaming logic for the MVP.
> 26 |     const backendResponse = await fetch(proxyRequest);
     |                            ^
  27 |     
  28 |     // Log the response status for debugging
  29 |     console.log('Backend response status:', backendResponse.status); {
  [cause]: [Error [SocketError]: other side closed] {
    code: 'UND_ERR_SOCKET',
    socket: {
      localAddress: '127.0.0.1',
      localPort: 54230,
      remoteAddress: '127.0.0.1',
      remotePort: 8101,
      remoteFamily: 'IPv4',
      timeout: undefined,
      bytesWritten: 331,
      bytesRead: 0
    }
  }
}
API Proxy Error: TypeError: fetch failed
    at async POST (app/api/chat/route.ts:26:28)
  24 |     // Forward the request and return the response directly.
  25 |     // This is a simple, effective proxy that doesn't need streaming logic for the MVP.
> 26 |     const backendResponse = await fetch(proxyRequest);
     |                            ^
  27 |     
  28 |     // Log the response status for debugging
  29 |     console.log('Backend response status:', backendResponse.status); {
  [cause]: [Error [SocketError]: other side closed] {
    code: 'UND_ERR_SOCKET',
    socket: {
      localAddress: '127.0.0.1',
      localPort: 38486,
      remoteAddress: '127.0.0.1',
      remotePort: 8101,
      remoteFamily: 'IPv4',
      timeout: undefined,
      bytesWritten: 331,
      bytesRead: 0
    }
  }
}
 POST /api/chat 500 in 44815ms
 GET / 200 in 70ms
 GET /.well-known/appspecific/com.chrome.devtools.json 404 in 68ms
 GET /favicon.ico?favicon.45db1c09.ico 200 in 223ms
 GET / 200 in 68ms
 GET /.well-known/appspecific/com.chrome.devtools.json 404 in 43ms
 GET / 200 in 147ms
 ✓ Compiled in 75ms
 ✓ Compiled in 125ms
 ○ Compiling /voice ...
 ✓ Compiled /voice in 683ms
 GET /voice 200 in 845ms
 ✓ Compiled in 124ms
 GET /voice 200 in 77ms
 GET /.well-known/appspecific/com.chrome.devtools.json 404 in 55ms
 GET /voice 200 in 63ms
 GET /.well-known/appspecific/com.chrome.devtools.json 404 in 83ms
 GET /favicon.ico?favicon.45db1c09.ico 200 in 257ms
 GET /voice 200 in 72ms
 GET /.well-known/appspecific/com.chrome.devtools.json 404 in 64ms
 GET /favicon.ico?favicon.45db1c09.ico 200 in 227ms
 ✓ Compiled in 123ms
 ✓ Compiled in 132ms
   Reload env: .env.local
 ✓ Compiled in 14ms
 GET / 200 in 153ms
 GET /voice 200 in 155ms
 GET /favicon.ico?favicon.45db1c09.ico 200 in 246ms
 GET /favicon.ico?favicon.45db1c09.ico 200 in 217ms
 GET /voice 200 in 180ms
 GET /.well-known/appspecific/com.chrome.devtools.json 404 in 67ms
 GET /favicon.ico?favicon.45db1c09.ico 200 in 221ms
 GET /voice 200 in 77ms
 GET /.well-known/appspecific/com.chrome.devtools.json 404 in 91ms
 GET /favicon.ico?favicon.45db1c09.ico 200 in 219ms
 GET /voice 200 in 73ms
 GET /.well-known/appspecific/com.chrome.devtools.json 404 in 74ms
 GET /favicon.ico?favicon.45db1c09.ico 200 in 222ms
 GET / 200 in 129ms
 GET / 200 in 64ms
 GET /favicon.ico?favicon.45db1c09.ico 200 in 217ms
 GET / 200 in 30ms
 GET /favicon.ico?favicon.45db1c09.ico 200 in 220ms
 GET /favicon.ico?favicon.45db1c09.ico 200 in 216ms
 GET /ingest 200 in 45ms
 GET /.well-known/appspecific/com.chrome.devtools.json 404 in 42ms
Backend URL: http://localhost:8101
 POST /ingest 200 in 44ms
Backend URL: http://localhost:8101
 POST /ingest 200 in 30ms
Backend URL: http://localhost:8101
 POST /ingest 200 in 30146ms
 GET / 200 in 35ms
 GET /voice 200 in 95ms
 GET /.well-known/appspecific/com.chrome.devtools.json 404 in 78ms
 GET / 200 in 37ms
Backend URL: http://localhost:8101
API Key configured: Yes
Backend response status: 200
Backend response headers: {
  'content-length': '465',
  'content-type': 'application/json',
  date: 'Fri, 11 Jul 2025 05:12:39 GMT',
  server: 'uvicorn',
  'x-request-id': 'de644fed-6e2a-4b07-9d77-0761abe09605'
}
 POST /api/chat 200 in 28478ms
 ✓ Compiled in 123ms
 ✓ Compiled in 119ms
 ✓ Compiled / in 35ms
 GET / 200 in 335ms
 GET / 200 in 42ms
 GET / 200 in 40ms
 GET /ingest 200 in 25ms
 GET / 200 in 33ms
 GET / 200 in 69ms
 ✓ Compiled in 136ms
 GET / 200 in 252ms
 GET /favicon.ico?favicon.45db1c09.ico 200 in 225ms
 GET / 200 in 34ms
 GET /favicon.ico?favicon.45db1c09.ico 200 in 217ms
 GET /favicon.ico?favicon.45db1c09.ico 200 in 217ms
 GET /ingest 200 in 22ms
 GET / 200 in 33ms
 GET / 200 in 37ms
 GET / 200 in 34ms
API Proxy Error: TypeError: fetch failed
    at async POST (app/api/chat/route.ts:26:28)
  24 |     // Forward the request and return the response directly.
  25 |     // This is a simple, effective proxy that doesn't need streaming logic for the MVP.
> 26 |     const backendResponse = await fetch(proxyRequest);
     |                            ^
  27 |     
  28 |     // Log the response status for debugging
  29 |     console.log('Backend response status:', backendResponse.status); {
  [cause]: Error: connect ECONNREFUSED 127.0.0.1:8101
      at <unknown> (Error: connect ECONNREFUSED 127.0.0.1:8101) {
    errno: -111,
    code: 'ECONNREFUSED',
    syscall: 'connect',
    address: '127.0.0.1',
    port: 8101
  }
}
 POST /api/chat 500 in 87ms
